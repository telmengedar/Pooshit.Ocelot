<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nightlycode.Database</name>
    </assembly>
    <members>
        <member name="T:NightlyCode.Database.Clients.DBClient">
            <summary>
            client to execute database commands
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.#ctor(System.Data.IDbConnection,NightlyCode.Database.Info.IDBInfo)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Clients.DBClient"/>
            </summary>
            <param name="connection">connection to database</param>
            <param name="dbinfo">information for database statements</param>
        </member>
        <member name="P:NightlyCode.Database.Clients.DBClient.DBInfo">
            <summary>
            database information
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Transaction">
            <summary>
            begins a transaction
            </summary>
            <returns>Transaction object to use</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Query(System.String,System.Object[])">
            <summary>
            executes a query
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>table containing result data</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Query(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>table containing result data</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.NonQuery(System.String,System.Object[])">
            <summary>
            executes a non query
            </summary>
            <param name="commandstring">command text to execute</param>
            <param name="parameters">parameters for command</param>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.NonQuery(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a non query
            </summary>
            <param name="commandstring">command text to execute</param>
            <param name="parameters">parameters for command</param>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Scalar(System.String,System.Object[])">
            <summary>
            executes a query returning a scalar
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting scalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Scalar(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query returning a scalar
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting scalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Set(System.String,System.Object[])">
            <summary>
            executes a query returning a set of values
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting set of values</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Set(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query returning a set of values
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting set of values</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.NonQuery(NightlyCode.Database.Clients.Transaction,System.String,System.Object[])">
            <summary>
            executes a non query
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="commandstring">command text to execute</param>
            <param name="parameters">parameters for command</param>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.NonQuery(NightlyCode.Database.Clients.Transaction,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a non query
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="commandstring">command text to execute</param>
            <param name="parameters">parameters for command</param>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Query(NightlyCode.Database.Clients.Transaction,System.String,System.Object[])">
            <summary>
            executes a query
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>table containing result data</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Query(NightlyCode.Database.Clients.Transaction,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>table containing result data</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Scalar(NightlyCode.Database.Clients.Transaction,System.String,System.Object[])">
            <summary>
            executes a query returning a scalar
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting scalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Scalar(NightlyCode.Database.Clients.Transaction,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query returning a scalar
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting scalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Set(NightlyCode.Database.Clients.Transaction,System.String,System.Object[])">
            <summary>
            executes a query returning a set of values
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting set of values</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.DBClient.Set(NightlyCode.Database.Clients.Transaction,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query returning a set of values
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting set of values</returns>
        </member>
        <member name="T:NightlyCode.Database.Clients.IDBClient">
            <summary>
            interface for clients which provide access to a database
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Clients.IDBClient.DBInfo">
            <summary>
            info about db connection
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.NonQuery(System.String,System.Object[])">
            <summary>
            executes a non query
            </summary>
            <param name="commandstring">command text to execute</param>
            <param name="parameters">parameters for command</param>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.NonQuery(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a non query
            </summary>
            <param name="commandstring">command text to execute</param>
            <param name="parameters">parameters for command</param>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.NonQuery(NightlyCode.Database.Clients.Transaction,System.String,System.Object[])">
            <summary>
            executes a non query
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="commandstring">command text to execute</param>
            <param name="parameters">parameters for command</param>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.NonQuery(NightlyCode.Database.Clients.Transaction,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a non query
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="commandstring">command text to execute</param>
            <param name="parameters">parameters for command</param>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Query(System.String,System.Object[])">
            <summary>
            executes a query
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>table containing result data</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Query(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>table containing result data</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Query(NightlyCode.Database.Clients.Transaction,System.String,System.Object[])">
            <summary>
            executes a query
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>table containing result data</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Query(NightlyCode.Database.Clients.Transaction,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>table containing result data</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Scalar(System.String,System.Object[])">
            <summary>
            executes a query returning a scalar
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting scalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Scalar(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query returning a scalar
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting scalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Scalar(NightlyCode.Database.Clients.Transaction,System.String,System.Object[])">
            <summary>
            executes a query returning a scalar
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting scalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Scalar(NightlyCode.Database.Clients.Transaction,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query returning a scalar
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting scalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Set(System.String,System.Object[])">
            <summary>
            executes a query returning a set of values
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting set of values</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Set(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query returning a set of values
            </summary>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting set of values</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Set(NightlyCode.Database.Clients.Transaction,System.String,System.Object[])">
            <summary>
            executes a query returning a set of values
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting set of values</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Set(NightlyCode.Database.Clients.Transaction,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            executes a query returning a set of values
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="query">command text to execute</param>
            <param name="parameters">parameters for command</param>
            <returns>resulting set of values</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.IDBClient.Transaction">
            <summary>
            begins a transaction
            </summary>
            <returns>Transaction object to use</returns>
        </member>
        <member name="T:NightlyCode.Database.Clients.Tables.DataRow">
            <summary>
            row of a database table
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Clients.Tables.DataRow.#ctor(System.Object[],NightlyCode.Database.Clients.Tables.DataTableColumns)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Clients.Tables.DataRow"/>
            </summary>
            <param name="data">data of the <see cref="T:NightlyCode.Database.Clients.Tables.DataRow"/></param>
            <param name="columns">column information of <see cref="T:NightlyCode.Database.Clients.Tables.DataTable"/></param>
        </member>
        <member name="P:NightlyCode.Database.Clients.Tables.DataRow.Item(System.Int32)">
            <summary>
            indexer for row data
            </summary>
            <param name="index">index at which to get value</param>
            <returns>value at the specified index</returns>
        </member>
        <member name="P:NightlyCode.Database.Clients.Tables.DataRow.Item(System.String)">
            <summary>
            indexer for row data
            </summary>
            <param name="column">name of column which to return</param>
            <returns>value of specified column</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.Tables.DataRow.GetValue``1(System.String)">
            <summary>
            get typed value from row
            </summary>
            <typeparam name="T">type of value to get</typeparam>
            <param name="column">name of column of which to read value</param>
            <returns>converted value</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.Tables.DataRow.GetValue``1(System.Int32)">
            <summary>
            get typed value from row
            </summary>
            <typeparam name="T">type of value to get</typeparam>
            <param name="index">index of column of which to read value</param>
            <returns>converted value</returns>
        </member>
        <member name="T:NightlyCode.Database.Clients.Tables.DataTable">
            <summary>
            table containing data fields
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Clients.Tables.DataTable.#ctor(NightlyCode.Database.Clients.Tables.DataTableColumns,NightlyCode.Database.Clients.Tables.DataRow[])">
            <summary>
            creates a new datatable
            </summary>
            <param name="columns">column descriptions</param>
            <param name="rows">rows in table</param>
        </member>
        <member name="P:NightlyCode.Database.Clients.Tables.DataTable.Columns">
            <summary>
            column information
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Clients.Tables.DataTable.Rows">
            <summary>
            rows containing data
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Clients.Tables.DataTable.FromReader(System.Data.IDataReader)">
            <summary>
            creates a <see cref="T:NightlyCode.Database.Clients.Tables.DataTable"/> from query result
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Clients.Tables.DataTableColumns">
            <summary>
            column information for a <see cref="T:NightlyCode.Database.Clients.Tables.DataTable"/>
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Clients.Tables.DataTableColumns.Item(System.String)">
            <summary>
            indexer for column index information
            </summary>
            <param name="column">column name</param>
            <returns>index information for column name</returns>
        </member>
        <member name="M:NightlyCode.Database.Clients.Tables.DataTableColumns.GetIndex(System.String)">
            <summary>
            get index for the column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:NightlyCode.Database.Clients.Tables.DataTableColumns.Names">
            <summary>
            names of columns
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Clients.Transaction">
            <summary>
            transaction of db clients
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Clients.Transaction.DbTransaction">
            <summary>
            transaction object
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Clients.Transaction.Commit">
            <summary>
            commits the transaction
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Clients.Transaction.Rollback">
            <summary>
            rolls back all changes made in transaction
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Clients.Transaction.Dispose">
            <summary>
            disposes the transaction, rolling back when it hasn't been commited
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Clients.Transaction.Finalize">
            <summary>
            disposes the transaction when it wasn't disposed before
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Attributes.AutoIncrementAttribute">
            <summary>
            specifies auto increment for a column
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Attributes.ColumnAttribute">
            <summary>
            attribute describing the column of a value
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.ColumnAttribute.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="column"></param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Attributes.ColumnAttribute.Column">
            <summary>
            name of the column
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.ColumnAttribute.Get(System.Reflection.PropertyInfo)">
            <summary>
            get the columnattribute for the property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Attributes.DefaultValueAttribute">
            <summary>
            specifies a default value for a column
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.DefaultValueAttribute.#ctor(System.Object)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Attributes.DefaultValueAttribute"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Attributes.DefaultValueAttribute.Value">
            <summary>
            default value
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.DefaultValueAttribute.GetDefaultValue(System.Reflection.PropertyInfo)">
            <summary>
            get default value for a property
            </summary>
            <param name="property">property of which to get default value</param>
            <returns>default value of property to use for database columns</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Attributes.IgnoreAttribute">
            <summary>
            specifies properties to ignore for mapping
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.IgnoreAttribute.HasIgnore(System.Reflection.PropertyInfo)">
            <summary>
            determines whether to ignore a property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Attributes.IndexAttribute">
            <summary>
            specifies an index name a column is part of
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.IndexAttribute.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Attributes.IndexAttribute"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Attributes.IndexAttribute.Name">
            <summary>
            name of the index
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Attributes.NotNullAttribute">
            <summary>
            specifies that a column must not be null
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.NotNullAttribute.HasNotNull(System.Reflection.PropertyInfo)">
            <summary>
            determines whether the property has a not null specification
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Attributes.PrimaryKeyAttribute">
            <summary>
            specifies that the column is the primary key
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.PrimaryKeyAttribute.Get(System.Reflection.PropertyInfo)">
            <summary>
            get the primary key attribute for the property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.PrimaryKeyAttribute.IsPrimaryKey(System.Reflection.PropertyInfo)">
            <summary>
            determines whether the specified property is a primary key
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Attributes.TableAttribute">
            <summary>
            attribute describing the table the object resides in
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.TableAttribute.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Attributes.TableAttribute"/>
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Attributes.TableAttribute.Table">
            <summary>
            table name
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.TableAttribute.Get(System.Type)">
            <summary>
            get the tableattribute for the specified type
            </summary>
            <param name="type">type for which to return <see cref="T:NightlyCode.Database.Entities.Attributes.TableAttribute"/></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Attributes.UniqueAttribute">
            <summary>
            specifies that the value of the column must be unique
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.UniqueAttribute.#ctor">
            <summary>
            creates a new unique attribute
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.UniqueAttribute.#ctor(System.String)">
            <summary>
            creates a new unique attribute
            </summary>
            <param name="name">name used to combine several properties to one unique statement</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Attributes.UniqueAttribute.Name">
            <summary>
            name used to combine several properties to one unique statement
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Attributes.ViewAttribute">
            <summary>
            used for entities to mark them as views
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Attributes.ViewAttribute.#ctor(System.String)">
            <summary>
            Creates a new view attribute
            </summary>
            <param name="definition"></param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Attributes.ViewAttribute.Definition">
            <summary>
            definition of view
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.DBConverterCollection">
            <summary>
            collection of custom db converters
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.DBConverterCollection.ContainsConverter(System.Type)">
            <summary>
            determines whether the collection contains a converter for the type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.DBConverterCollection.ToDBValue(System.Type,System.Object)">
            <summary>
            converts the value to a db value
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.DBConverterCollection.FromDBValue(System.Type,System.Object)">
            <summary>
            converts the value from a db value
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor">
            <summary>
            descriptor for a column of a database entity
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor.#ctor">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor"/>
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor"/>
            </summary>
            <param name="name">name of the column</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor.Name">
            <summary>
            name of the column
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor.PrimaryKey">
            <summary>
            determines whether the column is primary key
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor.IsUnique">
            <summary>
            determines whether value in column has to be unique
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor.AutoIncrement">
            <summary>
            determines whether the value of the column is set by auto increment
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor.NotNull">
            <summary>
            determines whether the column is allowed to contain null values
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor.DefaultValue">
            <summary>
            default value of the column
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.ColumnDescriptor.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor">
            <summary>
            descriptor for a column
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor.#ctor">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor"/>
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            ctor
            </summary>
            <param name="name"></param>
            <param name="property"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor.GetValue(System.Object)">
            <summary>
            get the value of an entity corresponding to the column
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            set the value to the column
            </summary>
            <param name="entity"></param>
            <param name="value"></param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor.Property">
            <summary>
            property the column is linked to
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor.CreateDefaultValue">
            <summary>
            creates a default value for this column
            </summary>
            <returns>value which can be used as a default</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptor">
            <summary>
            descriptor of an entity
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptor"/>
            </summary>
            <param name="tablename"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.AddColumn(NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor)">
            <summary>
            adds a column to the descriptor
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.ChangeColumnName(NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor,System.String)">
            <summary>
            changes the column name in model
            </summary>
            <param name="column">column to modify</param>
            <param name="name">new name of column</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.AddIndex(NightlyCode.Database.Entities.Descriptors.IndexDescriptor)">
            <summary>
            adds an index for the entity
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.AddUnique(NightlyCode.Database.Entities.Descriptors.UniqueDescriptor)">
            <summary>
            adds an unique descriptor for the entity
            </summary>
            <param name="unique"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.RemoveUnique(System.String[])">
            <summary>
            removes a unique descriptor from entity model
            </summary>
            <param name="columns">columns which make up the unique</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.PrimaryKeyColumn">
            <summary>
            the primary key column of the entity
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.Columns">
            <summary>
            columns of the entity
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.Indices">
            <summary>
            indices of the entity
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.Uniques">
            <summary>
            unique columns for entity
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.TableName">
            <summary>
            name of the table
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.GetColumn(System.String)">
            <summary>
            get the full column descriptor for the column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.GetColumnByProperty(System.String)">
            <summary>
            get the full column descriptor for the property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptor.Create(System.Type)">
            <summary>
            creates a new entity descriptor for a type
            </summary>
            <param name="type">type for which to create entity descriptor</param>
            <returns>entitydescriptor for specified type</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1">
            <summary>
            allows to modify entity model descriptions
            </summary>
            <remarks>
            this is useful if description can't be specified using attributes
            if entity descriptions are modified after the model has been updated in database (usually after application start)
            the behavior is at least undefined (if anything works at all)
            </remarks>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.#ctor(NightlyCode.Database.Entities.Descriptors.EntityDescriptor)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1"/>
            </summary>
            <param name="descriptor">descriptor to modify</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.Descriptor">
            <summary>
            descriptor modified by the accessor
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.Table(System.String)">
            <summary>
            sets name of table in which model is stored
            </summary>
            <param name="tablename">name of table</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            sets primary key of <see cref="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptor"/>
            </summary>
            <param name="column">column to use as primary key</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.Index(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            adds an index to the <see cref="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptor"/>
            </summary>
            <param name="name">name of index</param>
            <param name="columns">columns to be included in index</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.Unique(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            adds an unique index to the <see cref="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptor"/>
            </summary>
            <param name="columns">columns to be included in index</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.DropUnique(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            drops an unique index from the <see cref="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptor"/>
            </summary>
            <param name="columns">columns which make up the index</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.NotNull(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            flags columns not nullable
            </summary>
            <param name="columns">columns to flag not nullable</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.Nullable(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            flags columns nullable
            </summary>
            <param name="columns">columns to flag nullable</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.AutoIncrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            flags columns to auto increment their values on insert
            </summary>
            <param name="columns">columns to flag as auto increment</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.Default(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            sets a default value for a column
            </summary>
            <param name="column">column for which to set a default value</param>
            <param name="value">value to use as default</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.Column(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            changes the default column name
            </summary>
            <param name="column">column of which to change the name</param>
            <param name="name">new column name</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.DropColumn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            removes a column from descriptor
            </summary>
            <param name="column">column to remove</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorAccess`1.AddColumn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            adds a column to descriptor
            </summary>
            <param name="column">property to add as column</param>
        </member>
        <member name="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptorCache">
            <summary>
            caches models for entities
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorCache.Get``1">
            <summary>
            get entitydescriptor for the specified type
            </summary>
            <typeparam name="T">type of which to get entity descriptor</typeparam>
            <returns>entity descriptor for specified type</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.EntityDescriptorCache.Get(System.Type)">
            <summary>
            get entitydescriptor for the specified type
            </summary>
            <param name="type">type of which to get entity descriptor</param>
            <returns>entity descriptor for specified type</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Descriptors.IndexDescriptor">
            <summary>
            descriptor for an index
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.IndexDescriptor.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Descriptors.IndexDescriptor"/>
            </summary>
            <param name="name">name of index</param>
            <param name="columns">name of columns referenced by the index</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.IndexDescriptor.Name">
            <summary>
            name of the index
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.IndexDescriptor.Columns">
            <summary>
            columns linked to the index
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.IndexDescriptor.Equals(NightlyCode.Database.Entities.Descriptors.IndexDescriptor)">
            <inheritdocs/>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.IndexDescriptor.Equals(System.Object)">
            <inheritdocs/>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.IndexDescriptor.GetHashCode">
            <inheritdocs/>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.IndexDescriptor.ToString">
            <inheritdocs/>
        </member>
        <member name="T:NightlyCode.Database.Entities.Descriptors.UniqueDescriptor">
            <summary>
            descriptor for an index
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.UniqueDescriptor.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Descriptors.UniqueDescriptor"/>
            </summary>
            <param name="columns">columns which have to have a combined unique value</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Descriptors.UniqueDescriptor.Columns">
            <summary>
            columns linked to the unique specifier
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.UniqueDescriptor.Equals(NightlyCode.Database.Entities.Descriptors.UniqueDescriptor)">
            <inheritdocs/>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.UniqueDescriptor.Equals(System.Object)">
            <inheritdocs/>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.UniqueDescriptor.GetHashCode">
            <inheritdocs/>
        </member>
        <member name="M:NightlyCode.Database.Entities.Descriptors.UniqueDescriptor.ToString">
            <inheritdocs/>
        </member>
        <member name="T:NightlyCode.Database.Entities.EntityCache`2">
            <summary>
            buffers entities for a key to reduce loading operations to database
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityCache`2.#ctor(NightlyCode.Database.Entities.EntityManager,System.Func{`1,System.Linq.Expressions.Expression{System.Predicate{`0}}})">
            <summary>
            creates a new entity cache
            </summary>
            <param name="entitymanager"></param>
            <param name="loader"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityCache`2.GetEntity(`1,System.Func{`0})">
            <summary>
            get entity for key
            </summary>
            <param name="key">key for which to load entity</param>
            <param name="customcreator">creator which is used when no entity is found in db</param>
            <returns>entity for the key</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.EntityManager">
            <summary>
            manages entities in db
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.#ctor(NightlyCode.Database.Clients.IDBClient)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.EntityManager"/>
            </summary>
            <param name="dbclient">access to database</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.EntityManager.DBClient">
            <summary>
            client used to access db
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.Create``1">
            <summary>
            creates the table for the entity
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.Create(System.Type[])">
            <summary>
            creates the tables for the entities
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.UpdateSchema``1">
            <summary>
            updates the schema of the specified type
            </summary>
            <remarks>
            currently this is only implemented for sqlite databases
            </remarks>
            <typeparam name="T">type of which to update schema</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.InsertEntities``1">
            <summary>
            inserts entities to the db
            </summary>
            <typeparam name="T">type of entities to insert</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.LoadEntities``1">
            <summary>
            get a load operation for the specified entity type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.UpdateEntities``1">
            <summary>
            updates entities in db
            </summary>
            <typeparam name="T">type of entity to update</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.DeleteEntities``1">
            <summary>
            delete entities
            </summary>
            <typeparam name="T">type of entities to delete</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.Update``1">
            <summary>
            gets an operation which allows to update the values of an entity
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.Insert``1">
            <summary>
            gets an operation which allows to insert entities to database
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.Delete``1">
            <summary>
            get an operation used to delete data from database
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.Save``1(``0[])">
            <summary>
            inserts or updates the specified entities
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.Save``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            inserts or updates the specified entities
            </summary>
            <remarks>
            this only works with entities with a primary key and autoincrement or no primary key at all
            when used with an entity with primary key the primary key column has to be left untouched
            else this won't work either.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="entities"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.Load``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            get a load operation to use to load values of an entity from the database
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.Model``1">
            <summary>
            get access to an entity model
            </summary>
            <typeparam name="T">type of entity of which to access model</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.EntityManager.Transaction">
            <summary>
            starts a transaction
            </summary>
            <returns>Transaction object to use</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.IEntityManager">
            <summary>
            interface for an entity manager
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.IEntityManager.DBClient">
            <summary>
            client used to access db
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.Transaction">
            <summary>
            starts a transaction
            </summary>
            <returns>Transaction object to use</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.Create``1">
            <summary>
            creates the table for the entity
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.Create(System.Type[])">
            <summary>
            creates the tables for the entities
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.InsertEntities``1">
            <summary>
            inserts entities to the db
            </summary>
            <typeparam name="T">type of entities to insert</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.LoadEntities``1">
            <summary>
            get a load operation for the specified entity type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.UpdateEntities``1">
            <summary>
            updates entities in db
            </summary>
            <typeparam name="T">type of entities to update</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.DeleteEntities``1">
            <summary>
            delete entities
            </summary>
            <typeparam name="T">type of entities to delete</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.Update``1">
            <summary>
            gets an operation which allows to update the values of an entity
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.Save``1(``0[])">
            <summary>
            inserts or updates the specified entities
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.Save``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            inserts or updates the specified entities
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.Delete``1">
            <summary>
            get an operation used to delete data from database
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.Load``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            get a load operation to use to load values of an entity from the database
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.Insert``1">
            <summary>
            gets an operation which allows to insert entities to database
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.UpdateSchema``1">
            <summary>
            updates the schema of the specified type
            </summary>
            <remarks>
            currently this is only implemented for sqlite databases
            </remarks>
            <typeparam name="T">type of which to update schema</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.IEntityManager.Model``1">
            <summary>
            get access to an entity model
            </summary>
            <typeparam name="T">type of entity of which to access model</typeparam>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.DBOperators">
            <summary>
            operators for database operations
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.DBOperators.Like(System.String,System.String)">
            <summary>
            determines whether a string is like another instance of a string
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.DBOperators.Replace(System.String,System.String,System.String)">
            <summary>
            replaces every occurence of src in lhs with target
            </summary>
            <param name="lhs"></param>
            <param name="src"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.DeleteOperation`1">
            <summary>
            operation used to delete entities
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.DeleteOperation`1.#ctor(NightlyCode.Database.Clients.IDBClient,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            creates a new delete operation
            </summary>
            <param name="dbclient">access to database used for execution</param>
            <param name="descriptorgetter">information about entities</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.DeleteOperation`1.Criterias">
            <summary>
            criterias to use when loading
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.DeleteOperation`1.Execute">
            <summary>
            loads entities using the operation
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.DeleteOperation`1.Execute(NightlyCode.Database.Clients.Transaction)">
            <summary>
            loads entities using the operation
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.DeleteOperation`1.Prepare">
            <summary>
            prepares the operation for execution
            </summary>
            <returns>prepared operation to be executed</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.DeleteOperation`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            specifies criterias for the operation
            </summary>
            <param name="criterias">criterias of entities to delete</param>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Entities.DeleteEntitiesOperation`1">
            <summary>
            removes entities from db
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.DeleteEntitiesOperation`1.#ctor(NightlyCode.Database.Clients.IDBClient,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Entities.DeleteEntitiesOperation`1"/>
            </summary>
            <param name="dbclient">access to database</param>
            <param name="descriptor">access to entity descriptor</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.DeleteEntitiesOperation`1.Execute(`0[])">
            <summary>
            executes the operation
            </summary>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.DeleteEntitiesOperation`1.Execute(NightlyCode.Database.Clients.Transaction,`0[])">
            <summary>
            executes the operation using a transaction
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.DeleteEntitiesOperation`1.Execute(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            executes the operation
            </summary>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.DeleteEntitiesOperation`1.Execute(NightlyCode.Database.Clients.Transaction,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            executes the operation using a transaction
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Entities.IEntityOperation`1">
            <summary>
            operation to be executed on entities
            </summary>
            <typeparam name="T">type of entities</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.IEntityOperation`1.Execute(`0[])">
            <summary>
            executes the operation
            </summary>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.IEntityOperation`1.Execute(NightlyCode.Database.Clients.Transaction,`0[])">
            <summary>
            executes the operation using a transaction
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.IEntityOperation`1.Execute(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            executes the operation
            </summary>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.IEntityOperation`1.Execute(NightlyCode.Database.Clients.Transaction,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            executes the operation using a transaction
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Entities.InsertEntitiesOperation`1">
            <summary>
            inserts new entities to the db
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.InsertEntitiesOperation`1.#ctor(NightlyCode.Database.Entities.IEntityManager,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Entities.InsertEntitiesOperation`1"/>
            </summary>
            <param name="entitymanager">access to entity layer of database</param>
            <param name="descriptor">access to entity description</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.InsertEntitiesOperation`1.Execute(`0[])">
            <summary>
            executes the operation
            </summary>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.InsertEntitiesOperation`1.Execute(NightlyCode.Database.Clients.Transaction,`0[])">
            <summary>
            executes the operation using a transaction
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.InsertEntitiesOperation`1.Execute(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            executes the operation
            </summary>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Entities.UpdateEntitiesOperation`1">
            <summary>
            updates existing entities in db
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.UpdateEntitiesOperation`1.#ctor(NightlyCode.Database.Clients.IDBClient,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Entities.UpdateEntitiesOperation`1"/>
            </summary>
            <param name="dbclient">access to database</param>
            <param name="descriptor">access to entity description</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.UpdateEntitiesOperation`1.Execute(`0[])">
            <summary>
            executes the operation
            </summary>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.UpdateEntitiesOperation`1.Execute(NightlyCode.Database.Clients.Transaction,`0[])">
            <summary>
            executes the operation using a transaction
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.UpdateEntitiesOperation`1.Execute(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            executes the operation
            </summary>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Entities.UpdateEntitiesOperation`1.Execute(NightlyCode.Database.Clients.Transaction,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            executes the operation using a transaction
            </summary>
            <param name="transaction">transaction to use</param>
            <param name="entities">entities on which to operate</param>
            <returns>number of affected rows</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.EntityField">
            <summary>
            field describing a property of an entity
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.EntityField.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.EntityField"/>
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.EntityField.FieldExpression">
            <summary>
            expression describing the field
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.EntityField.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            creates an entity field
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldexpression"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Expressions.ColumnVisitor.#ctor(NightlyCode.Database.Entities.Descriptors.EntityDescriptor)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Expressions.ColumnVisitor"/>
            </summary>
            <param name="descriptor">schema info for entity to be analysed</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Expressions.ColumnVisitor.GetColumnName(System.Linq.Expressions.Expression)">
            <summary>
            get column name stored in expression
            </summary>
            <param name="expression">expression to analyse</param>
            <returns>column name if any is found in expression, null otherwise</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Expressions.CriteriaVisitor">
            <summary>
            visits an expression tree to convert it to sql
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Expressions.PropertyVisitor.GetProperty(System.Linq.Expressions.Expression)">
            <summary>
            get column name stored in expression
            </summary>
            <param name="expression">expression to analyse</param>
            <returns>column name if any is found in expression, null otherwise</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Fields.Aggregate">
            <summary>
            aggregate with <see cref="T:NightlyCode.Database.Entities.Operations.Fields.IDBField"/> arguments
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.Aggregate.#ctor(System.String,NightlyCode.Database.Entities.Operations.Fields.IDBField[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Fields.Aggregate"/>
            </summary>
            <param name="method">aggregate method</param>
            <param name="arguments">arguments for method</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.Aggregate.Method">
            <summary>
            method name
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.Aggregate.Arguments">
            <summary>
            content of the function
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Fields.Constant">
            <summary>
            constant value
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.Constant.#ctor(System.Object)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Fields.Constant"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.Constant.Value">
            <summary>
            value
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.Constant.Create(System.Object)">
            <summary>
            creates a new constant
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Fields.DBFunction">
            <summary>
            function of db
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBFunction.Type">
            <summary>
            type of function
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBFunction.Parameter">
            <summary>
            expression describing the field
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBFunction.Random">
            <summary>
            random value
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBFunction.All">
            <summary>
            random value
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBFunction.Count">
            <summary>
            count the rows of the result
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBFunction.RowID">
            <summary>
            table wide unique id of row
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBFunction.LastInsertID">
            <summary>
            used to get id of last inserted row of the session
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBFunction.Length``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            length of a text or blob
            </summary>
            <typeparam name="T">type of entity containing the text or blob</typeparam>
            <param name="fieldexpression">expression targeting the field to measure</param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBFunction.Total``1(``0[])">
            <summary>
            sums up a field in db returning a floating point result
            </summary>
            <typeparam name="T">type of values</typeparam>
            <param name="values">values of which to get total</param>
            <returns>total value (sum in float)</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBFunction.Max``1(``0[])">
            <summary>
            get the maximum of a series of values
            </summary>
            <typeparam name="T">type of values</typeparam>
            <param name="values">values of which to get max</param>
            <returns>maximum value</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBFunction.Min``1(``0[])">
            <summary>
            get the minimum of a series of values
            </summary>
            <typeparam name="T">type of values</typeparam>
            <param name="values">values of which to get min</param>
            <returns>minimum value</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBFunction.Average``1(``0[])">
            <summary>
            get the average of a series of values
            </summary>
            <typeparam name="T">type of values</typeparam>
            <param name="values">values of which to get average</param>
            <returns>average value</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBFunction.Sum``1(``0)">
            <summary>
            get the sum of a column
            </summary>
            <typeparam name="T">type of values</typeparam>
            <param name="value">column in expression of which to get sum</param>
            <returns>average value</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Fields.DBFunctionType">
            <summary>
            functions of db
            </summary>
        </member>
        <member name="F:NightlyCode.Database.Entities.Operations.Fields.DBFunctionType.Random">
            <summary>
            random value
            </summary>
        </member>
        <member name="F:NightlyCode.Database.Entities.Operations.Fields.DBFunctionType.Count">
            <summary>
            row count
            </summary>
        </member>
        <member name="F:NightlyCode.Database.Entities.Operations.Fields.DBFunctionType.RowID">
            <summary>
            unique id of row (oid)
            </summary>
        </member>
        <member name="F:NightlyCode.Database.Entities.Operations.Fields.DBFunctionType.Length">
            <summary>
            length of a string or text
            </summary>
        </member>
        <member name="F:NightlyCode.Database.Entities.Operations.Fields.DBFunctionType.LastInsertID">
            <summary>
            id of last inserted row
            </summary>
        </member>
        <member name="F:NightlyCode.Database.Entities.Operations.Fields.DBFunctionType.All">
            <summary>
            all fields of type
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Fields.DBParameter">
            <summary>
            parameter for statements
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBParameter.Index(System.Int32)">
            <summary>
            creates a reference to a parameter
            </summary>
            <param name="index">index of parameter</param>
            <returns>field to use in expressions</returns>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter.Value">
            <summary>
            field used for lambda operations
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter.Bool">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.Boolean"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter.Guid">
            <summary>
            field to use in expressions when referencing a <see cref="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter.Guid"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter.Int32">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.Int32"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter.Int64">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.Int64"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter.String">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.String"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter.Single">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.String"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter.Double">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.String"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter.Blob">
            <summary>
            field to use in expressions when referencing a <see cref="T:byte[]"/> parameter
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Fields.DBParameter`1">
            <summary>
            generic parameter for specific types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBParameter`1.Index(System.Int32)">
            <summary>
            creates a reference to a parameter
            </summary>
            <param name="index">index of parameter</param>
            <returns>field to use in expressions</returns>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter`1.Data">
            <summary>
            field to use in expressions when referencing a <see cref="!:T"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBParameter`1.Value">
            <summary>
            field to use in expressions when referencing a <see cref="!:T"/> parameter
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Fields.IDBField">
            <summary>
            interface for a db field
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.Value">
            <summary>
            field used for lambda operations
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.Int32">
            <summary>
            field used for comparision
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.DateTime">
            <summary>
            field used for comparision
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.Guid">
            <summary>
            field to use in expressions when referencing a <see cref="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.Guid"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.Int64">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.Int64"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.String">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.String"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.Single">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.String"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.Double">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.String"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.Blob">
            <summary>
            field to use in expressions when referencing a <see cref="T:byte[]"/> parameter
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Fields.DBField">
            <summary>
            base implementation of <see cref="T:NightlyCode.Database.Entities.Operations.Fields.IDBField"/> for comparision properties
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Multiply(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compute with <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Division(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compute with <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Addition(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compute with <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Subtraction(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compute with <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_LessThan(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_GreaterThan(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_LessThanOrEqual(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_GreaterThanOrEqual(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Inequality(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Modulus(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Equality(NightlyCode.Database.Entities.Operations.Fields.DBField,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Equality(System.Int64,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Inequality(System.Int64,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Equality(NightlyCode.Database.Entities.Operations.Fields.DBField,System.Int64)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Inequality(NightlyCode.Database.Entities.Operations.Fields.DBField,System.Int64)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Equality(System.Int32,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Inequality(System.Int32,NightlyCode.Database.Entities.Operations.Fields.DBField)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Equality(NightlyCode.Database.Entities.Operations.Fields.DBField,System.Int32)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Fields.DBField.op_Inequality(NightlyCode.Database.Entities.Operations.Fields.DBField,System.Int32)">
            <summary>
            comparision operator used to compare <see cref="T:NightlyCode.Database.Entities.Operations.Fields.DBField"/>s
            </summary>
            <param name="lhs">left hand side field</param>
            <param name="rhs">right hand side field</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBField.Bool">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.Boolean"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBField.Value">
            <summary>
            field used for lambda operations
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBField.Int32">
            <summary>
            field used for comparision
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBField.DateTime">
            <summary>
            field used for comparision
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBField.Guid">
            <summary>
            field to use in expressions when referencing a <see cref="P:NightlyCode.Database.Entities.Operations.Fields.IDBField.Guid"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBField.Int64">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.Int64"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBField.String">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.String"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBField.Single">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.String"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBField.Double">
            <summary>
            field to use in expressions when referencing a <see cref="T:System.String"/> parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.DBField.Blob">
            <summary>
            field to use in expressions when referencing a <see cref="T:byte[]"/> parameter
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Fields.LimitField">
            <summary>
            limits the number of result rows
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.LimitField.Limit">
            <summary>
            maximum number of rows to return
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Fields.LimitField.Offset">
            <summary>
            number of rows to skip in returned result
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.InsertValuesOperation`1">
            <summary>
            updates values for an entity in the database
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.InsertValuesOperation`1.#ctor(NightlyCode.Database.Clients.IDBClient,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            creates a new insert values operation
            </summary>
            <param name="dbclient"></param>
            <param name="descriptorgetter"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.InsertValuesOperation`1.Columns(NightlyCode.Database.Entities.Operations.Fields.IDBField[])">
            <summary>
            sets the columns to be updated
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.InsertValuesOperation`1.Columns(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            sets the columns to be updated
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.InsertValuesOperation`1.Values(System.Object[])">
            <summary>
            sets the values to be updated
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.InsertValuesOperation`1.Execute(NightlyCode.Database.Clients.Transaction)">
            <summary>
            executes the insert operation
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.JoinOperation">
            <summary>
            operation used to join tables
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.JoinOperation.#ctor(System.Type,System.Linq.Expressions.Expression)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.JoinOperation"/>
            </summary>
            <param name="joinType">type of entity to join</param>
            <param name="criterias">join criterias</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.JoinOperation.JoinType">
            <summary>
            type to join
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.JoinOperation.Criterias">
            <summary>
            criterias to use when joining tables
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1">
            <summary>
            operation used to load entities
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.#ctor(NightlyCode.Database.Entities.Operations.LoadEntitiesOperation{`0})">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1"/>
            </summary>
            <param name="origin"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.#ctor(NightlyCode.Database.Clients.IDBClient,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            ctor
            </summary>
            <param name="dbclient"> </param>
            <param name="descriptorgetter"></param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.LimitStatement">
            <summary>
            result limit
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.JoinOperations">
            <summary>
            operations to join
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.Criterias">
            <summary>
            criterias to use when loading
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.Havings">
            <summary>
            having criterias
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.Execute">
            <summary>
            loads entities using the operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.Prepare">
            <summary>
            prepares the operation for execution
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            specifies criterias for the operation
            </summary>
            <param name="criterias"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.Where(System.Linq.Expressions.Expression)">
            <summary>
            specifies criterias for the operation
            </summary>
            <param name="criterias"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.Having(System.Linq.Expressions.Expression{System.Predicate{`0}})">
            <summary>
            specifies having criterias for the operation
            </summary>
            <param name="criterias"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.OrderBy(NightlyCode.Database.Entities.Operations.OrderByCriteria[])">
            <summary>
            specifies an order
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.GroupBy(NightlyCode.Database.Entities.Operations.Fields.IDBField[])">
            <summary>
            groups the results by the specified fields
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.Limit(System.Int64)">
            <summary>
            specifies a limited number of rows to return
            </summary>
            <param name="limit">number of rows to return</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.Offset(System.Int64)">
            <summary>
            specifies an offset from which on to return result rows
            </summary>
            <param name="offset">number of rows to skip</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            joins another type to the operation
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`2">
            <summary>
            operation used to load entities based on a join operation
            </summary>
            <typeparam name="TLoad"></typeparam>
            <typeparam name="TJoin"></typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`2.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            specifies criterias for the operation
            </summary>
            <param name="criterias"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`2.OrderBy(NightlyCode.Database.Entities.Operations.OrderByCriteria[])">
            <summary>
            specifies an order
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`2.GroupBy(NightlyCode.Database.Entities.Operations.Fields.IDBField[])">
            <summary>
            groups the results by the specified fields
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`2.Limit(System.Int32)">
            <summary>
            specifies a limited number of rows to return
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadEntitiesOperation`2.Having(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            specifies having criterias for the operation
            </summary>
            <param name="criterias"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.LoadValuesOperation`2">
            <summary>
            operation used to load values of an entity based on a join operation
            </summary>
            <typeparam name="TLoad">type of initially loaded entity</typeparam>
            <typeparam name="TJoin">type of joined entity</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`2.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            specifies criterias for the operation
            </summary>
            <param name="criterias"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`2.OrderBy(NightlyCode.Database.Entities.Operations.OrderByCriteria[])">
            <summary>
            specifies an order
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`2.GroupBy(NightlyCode.Database.Entities.Operations.Fields.IDBField[])">
            <summary>
            groups the results by the specified fields
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`2.Limit(System.Int32)">
            <summary>
            specifies a limited number of rows to return
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`2.Having(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            specifies having criterias for the operation
            </summary>
            <param name="criterias"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1">
            <summary>
            operation used to load values of an entity
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.#ctor(NightlyCode.Database.Entities.Operations.LoadValuesOperation{`0})">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1"/>
            </summary>
            <param name="origin">operation of which to copy existing specifications</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.#ctor(NightlyCode.Database.Clients.IDBClient,NightlyCode.Database.Entities.Operations.Fields.IDBField[],System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1"/>
            </summary>
            <param name="dbclient"> </param>
            <param name="fields">fields to load</param>
            <param name="descriptorgetter"></param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.LimitStatement">
            <summary>
            limit to use when loading
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.JoinOperations">
            <summary>
            operations to join
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.Criterias">
            <summary>
            criterias to use when loading
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.Havings">
            <summary>
            having criterias
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.Execute(NightlyCode.Database.Clients.Transaction)">
            <summary>
            loads entities using the operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.Execute">
            <summary>
            loads entities using the operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.ExecuteScalar``1(NightlyCode.Database.Clients.Transaction)">
            <summary>
            loads a value using the operation
            </summary>
            <typeparam name="TScalar"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.ExecuteScalar``1">
            <summary>
            loads a value using the operation
            </summary>
            <typeparam name="TScalar"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.ExecuteSet``1(NightlyCode.Database.Clients.Transaction)">
            <summary>
            loads several values using the operation
            </summary>
            <typeparam name="TScalar"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.ExecuteSet``1">
            <summary>
            loads several values using the operation
            </summary>
            <typeparam name="TScalar"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.ExecuteType``1(System.Func{NightlyCode.Database.Clients.Tables.DataRow,``0})">
            <summary>
            executes a query and stores the result in a custom result type
            </summary>
            <typeparam name="TType">type of result</typeparam>
            <param name="assignments">action used to assign values</param>
            <returns>enumeration of result types</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.ExecuteType``1(NightlyCode.Database.Clients.Transaction,System.Func{NightlyCode.Database.Clients.Tables.DataRow,``0})">
            <summary>
            executes a query and stores the result in a custom result type
            </summary>
            <typeparam name="TType">type of result</typeparam>
            <param name="transaction">transaction to use for operation execution</param>
            <param name="assignments">action used to assign values</param>
            <returns>enumeration of result types</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.Prepare">
            <summary>
            prepares the operation for execution
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            specifies criterias for the operation
            </summary>
            <param name="criterias"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            specifies having criterias for the operation
            </summary>
            <param name="criterias"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.OrderBy(NightlyCode.Database.Entities.Operations.OrderByCriteria[])">
            <summary>
            specifies an order
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.GroupBy(NightlyCode.Database.Entities.Operations.Fields.IDBField[])">
            <summary>
            groups the results by the specified fields
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.Limit(System.Int64)">
            <summary>
            specifies a limited number of rows to return
            </summary>
            <param name="limit">number of rows to return</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.Offset(System.Int64)">
            <summary>
            specifies an offset from which on to return result rows
            </summary>
            <param name="offset">number of rows to skip</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.LoadValuesOperation`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            joins another type to the operation
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.OrderByCriteria">
            <summary>
            criteria used for ordering of results
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.OrderByCriteria.#ctor(NightlyCode.Database.Entities.Operations.Fields.IDBField,System.Boolean)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.OrderByCriteria"/>
            </summary>
            <param name="field">field by which to order result set</param>
            <param name="ascending">whether to sort ascending</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.OrderByCriteria.Field">
            <summary>
            fields by which to order result
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.OrderByCriteria.Ascending">
            <summary>
            whether to order ascending or descending
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.CommandTextToken">
            <summary>
            token representing a raw command text
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.CommandTextToken.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.CommandTextToken"/>
            </summary>
            <param name="text">raw command text</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.CommandTextToken.Text">
            <summary>
            command text
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.CommandTextToken.GetText(NightlyCode.Database.Info.IDBInfo)">
            <summary>
            get text for database command
            </summary>
            <param name="dbinfo">database specific information</param>
            <returns>text representing this token</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.IOperationToken">
            <summary>
            token in <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator"/>
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.IOperationToken.GetText(NightlyCode.Database.Info.IDBInfo)">
            <summary>
            get text for database command
            </summary>
            <param name="dbinfo">database specific information</param>
            <returns>text representing this token</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator">
            <summary>
            preparator for operations
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator.AppendArrayParameter">
            <summary>
            appends a custom array parameter to the command
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator.AppendArrayParameterIndex(System.Int32)">
            <summary>
            appends a custom array parameter to the command
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator.AppendParameter">
            <summary>
            appends a reference to a parameter index to the command
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator.AppendParameterIndex(System.Int32)">
            <summary>
            appends a reference to a parameter index to the command
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator.AppendParameter(System.Object)">
            <summary>
            appends a parameter to the command
            </summary>
            <param name="value">value of parameter (optional)</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator.AppendText(System.String)">
            <summary>
            appends a raw command text to the operation
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator.GetOperation(NightlyCode.Database.Clients.IDBClient)">
            <summary>
            create prepared operation
            </summary>
            <param name="dbclient">client used to execute operation</param>
            <returns>operation which can get executed</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator.GetLoadValuesOperation(NightlyCode.Database.Clients.IDBClient)">
            <summary>
            create prepared operation
            </summary>
            <param name="dbclient">client used to execute operation</param>
            <returns>operation which can get executed</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator.GetLoadEntitiesOperation``1(NightlyCode.Database.Clients.IDBClient,NightlyCode.Database.Entities.Descriptors.EntityDescriptor)">
            <summary>
            create prepared operation
            </summary>
            <param name="dbclient">client used to execute operation</param>
            <returns>operation which can get executed</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.ParameterToken">
            <summary>
            token representing a parameter
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.ParameterToken.#ctor(System.Boolean)">
            <summary>
            creates a new parameter token
            </summary>
            <param name="isArray">true if parameter will contain an array, false otherwise</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.ParameterToken.#ctor(System.Object)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.ParameterToken"/>
            </summary>
            <param name="value">value of constant parameter</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.ParameterToken.IsArray">
            <summary>
            determines whether the parameter value is an array
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.ParameterToken.IsConstant">
            <summary>
            determines whether the value is predefined or to be specified on execution
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.ParameterToken.Value">
            <summary>
            value of constant
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.ParameterToken.Index">
            <summary>
            index for parameter
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.ParameterToken.GetText(NightlyCode.Database.Info.IDBInfo)">
            <summary>
            get text for database command
            </summary>
            <param name="dbinfo">database specific information</param>
            <returns>text representing this token</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadEntitiesOperation`1">
            <summary>
            a <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadEntitiesOperation`1"/> using array parameters
            </summary>
            <typeparam name="T">type of entities to load</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadEntitiesOperation`1.#ctor(NightlyCode.Database.Clients.IDBClient,NightlyCode.Database.Entities.Descriptors.EntityDescriptor,System.String,System.Object[],System.Array[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadEntitiesOperation`1"/>
            </summary>
            <param name="dbclient">access to database used for execution of operation</param>
            <param name="descriptor">descriptor used to create entities</param>
            <param name="commandtext">command text to execute</param>
            <param name="parameters">initial parameters of operation</param>
            <param name="arrayparameters">array parameters of operation</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadEntitiesOperation`1.ConstantArrayParameters">
            <summary>
            array parameters for command
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadEntitiesOperation`1.Execute(System.Object[])">
            <summary>
            executes the statement
            </summary>
            <returns>entities created from result set</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadEntitiesOperation`1.Execute(NightlyCode.Database.Clients.Transaction,System.Object[])">
            <summary>
            executes the statement
            </summary>
            <param name="transaction">transaction to use for execution</param>
            <param name="parameters">parameters to use for execution</param>
            <returns>entities created from result set</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation">
            <summary>
            <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation"/> containing array parameters
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation.#ctor(NightlyCode.Database.Clients.IDBClient,System.String,System.Object[],System.Array[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation"/>
            </summary>
            <param name="dbclient">database access</param>
            <param name="commandtext">command text</param>
            <param name="parameters">parameters for operation</param>
            <param name="arrayparameters">array parameters for operation</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation.ConstantArrayParameters">
            <summary>
            array parameters for command
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation.Execute(System.Object[])">
            <summary>
            executes the statement
            </summary>
            <param name="parameters">parameters for execution</param>
            <returns>data table containing results</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation.Execute(NightlyCode.Database.Clients.Transaction,System.Object[])">
            <summary>
            executes the statement
            </summary>
            <param name="transaction">transaction used to execute operation</param>
            <param name="parameters">parameters for execution</param>
            <returns>data table containing results</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation.ExecuteScalar``1(System.Object[])">
            <summary>
            executes the statement returning a scalar
            </summary>
            <returns>first value of the result set or default of TScalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation.ExecuteScalar``1(NightlyCode.Database.Clients.Transaction,System.Object[])">
            <summary>
            executes the statement returning a scalar
            </summary>
            <returns>first value of the result set or default of TScalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation.ExecuteSet``1(System.Object[])">
            <summary>
            executes the statement returning a set of scalars
            </summary>
            <typeparam name="TScalar">type of scalar to return</typeparam>
            <returns>values of first column of result set converted to TScalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation.ExecuteSet``1(NightlyCode.Database.Clients.Transaction,System.Object[])">
            <summary>
            executes the statement returning a set of scalars
            </summary>
            <typeparam name="TScalar">type of scalar to return</typeparam>
            <returns>values of first column of result set converted to TScalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation.ExecuteType``1(System.Func{NightlyCode.Database.Clients.Tables.DataRow,``0},System.Object[])">
            <summary>
            executes a query and stores the result in a custom result type
            </summary>
            <typeparam name="TType">type of result</typeparam>
            <param name="assignments">action used to assign values</param>
            <param name="parameters">custom parameters for query execution</param>
            <returns>enumeration of result types</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayLoadValuesOperation.ExecuteType``1(NightlyCode.Database.Clients.Transaction,System.Func{NightlyCode.Database.Clients.Tables.DataRow,``0},System.Object[])">
            <summary>
            executes a query and stores the result in a custom result type
            </summary>
            <typeparam name="TType">type of result</typeparam>
            <param name="assignments">action used to assign values</param>
            <param name="transaction">transaction to use for execution</param>
            <param name="parameters">custom parameters for query execution</param>
            <returns>enumeration of result types</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayOperation">
            <summary>
            <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperation"/> containing array parameters
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayOperation.#ctor(NightlyCode.Database.Clients.IDBClient,System.String,System.Object[],System.Array[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayOperation"/>
            </summary>
            <param name="dbclient">access to database</param>
            <param name="commandText">sql query text</param>
            <param name="parameters">parameters for query</param>
            <param name="arrayparameters">array parameters for query</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayOperation.ConstantArrayParameters">
            <summary>
            array parameters for command
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayOperation.Execute(System.Object[])">
            <summary>
            executes the operation using custom parameters
            </summary>
            <param name="parameters">parameters for operation</param>
            <returns>number of affected rows if applicable</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedArrayOperation.Execute(NightlyCode.Database.Clients.Transaction,System.Object[])">
            <summary>
            executes the operation using custom parameters
            </summary>
            <param name="transaction">transaction used to execute operation</param>
            <param name="parameters">parameters for operation</param>
            <returns>number of affected rows if applicable</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadEntitiesOperation`1">
            <summary>
            load operation prepared to execute
            </summary>
            <typeparam name="T">type of entity created from result set</typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadEntitiesOperation`1.#ctor(NightlyCode.Database.Clients.IDBClient,NightlyCode.Database.Entities.Descriptors.EntityDescriptor,System.String,System.Object[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadEntitiesOperation`1"/>
            </summary>
            <param name="dbclient">access to database used for execution of operation</param>
            <param name="descriptor">descriptor used to create entities</param>
            <param name="commandtext">command text to execute</param>
            <param name="parameters">initial parameters of operation</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadEntitiesOperation`1.Execute(System.Object[])">
            <summary>
            executes the statement
            </summary>
            <returns>entities created from result set</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadEntitiesOperation`1.Execute(NightlyCode.Database.Clients.Transaction,System.Object[])">
            <summary>
            executes the statement
            </summary>
            <param name="transaction">transaction to use for execution</param>
            <param name="parameters">parameters to use for execution</param>
            <returns>entities created from result set</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation">
            <summary>
            a prepared load values operation
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation.#ctor(NightlyCode.Database.Clients.IDBClient,System.String,System.Object[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation"/>
            </summary>
            <param name="dbclient">database access</param>
            <param name="commandtext">command text</param>
            <param name="parameters">parameters for operation</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation.Execute(System.Object[])">
            <summary>
            executes the statement
            </summary>
            <param name="parameters">parameters for execution</param>
            <returns>data table containing results</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation.Execute(NightlyCode.Database.Clients.Transaction,System.Object[])">
            <summary>
            executes the statement
            </summary>
            <param name="transaction">transaction used to execute operation</param>
            <param name="parameters">parameters for execution</param>
            <returns>data table containing results</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation.ExecuteScalar``1(System.Object[])">
            <summary>
            executes the statement returning a scalar
            </summary>
            <returns>first value of the result set or default of TScalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation.ExecuteScalar``1(NightlyCode.Database.Clients.Transaction,System.Object[])">
            <summary>
            executes the statement returning a scalar
            </summary>
            <returns>first value of the result set or default of TScalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation.ExecuteSet``1(System.Object[])">
            <summary>
            executes the statement returning a set of scalars
            </summary>
            <typeparam name="TScalar">type of scalar to return</typeparam>
            <returns>values of first column of result set converted to TScalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation.ExecuteSet``1(NightlyCode.Database.Clients.Transaction,System.Object[])">
            <summary>
            executes the statement returning a set of scalars
            </summary>
            <typeparam name="TScalar">type of scalar to return</typeparam>
            <returns>values of first column of result set converted to TScalar</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation.ExecuteType``1(System.Func{NightlyCode.Database.Clients.Tables.DataRow,``0},System.Object[])">
            <summary>
            executes a query and stores the result in a custom result type
            </summary>
            <typeparam name="TType">type of result</typeparam>
            <param name="assignments">action used to assign values</param>
            <param name="parameters">custom parameters for query execution</param>
            <returns>enumeration of result types</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedLoadValuesOperation.ExecuteType``1(NightlyCode.Database.Clients.Transaction,System.Func{NightlyCode.Database.Clients.Tables.DataRow,``0},System.Object[])">
            <summary>
            executes a query and stores the result in a custom result type
            </summary>
            <typeparam name="TType">type of result</typeparam>
            <param name="assignments">action used to assign values</param>
            <param name="transaction">transaction to use for execution</param>
            <param name="parameters">custom parameters for query execution</param>
            <returns>enumeration of result types</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperation">
            <summary>
            a prepared db operation
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperation.#ctor(NightlyCode.Database.Clients.IDBClient,System.String,System.Object[])">
            <summary>
            creates a new prepared operation
            </summary>
            <param name="dbclient">access to database</param>
            <param name="commandText">sql query text</param>
            <param name="constantparameters">parameters for query</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperation.DBClient">
            <summary>
            access to database
            </summary>
            <remarks>
            this usually is used to execute the operation
            </remarks>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperation.CommandText">
            <summary>
            text to execute
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperation.ConstantParameters">
            <summary>
            parameters for command
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperation.Execute(System.Object[])">
            <summary>
            executes the operation using custom parameters
            </summary>
            <param name="parameters">parameters for operation</param>
            <returns>number of affected rows if applicable</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperation.Execute(NightlyCode.Database.Clients.Transaction,System.Object[])">
            <summary>
            executes the operation using custom parameters
            </summary>
            <param name="transaction">transaction used to execute operation</param>
            <param name="parameters">parameters for operation</param>
            <returns>number of affected rows if applicable</returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperation.ToString">
            <inheritdoc/>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperationData">
            <summary>
            operation data prepared for execution
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperationData.Command">
            <summary>
            command text
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperationData.Parameters">
            <summary>
            final parameters of operation
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.Prepared.PreparedOperationData.Create(NightlyCode.Database.Clients.IDBClient,System.String,System.Object[],System.Array[],System.Object[],System.Array[])">
            <summary>
            prepares an operation for execution
            </summary>
            <param name="dbclient">db client used to execute operation</param>
            <param name="commandtext">command text</param>
            <param name="constantparameters">constant parameters</param>
            <param name="constantarrayparameters">constant array parameters</param>
            <param name="parameters">user parameters</param>
            <param name="arrayparameters">user array parameters</param>
            <returns>prepared operation data which can get executed</returns>
        </member>
        <member name="T:NightlyCode.Database.Entities.Operations.UpdateValuesOperation`1">
            <summary>
            updates values for an entity in the database
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.UpdateValuesOperation`1.#ctor(NightlyCode.Database.Clients.IDBClient,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            ctor
            </summary>
            <param name="dbclient"></param>
            <param name="descriptorgetter"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.UpdateValuesOperation`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            sets the values to be updated
            </summary>
            <param name="setters"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Entities.Operations.UpdateValuesOperation`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            sets the criterias for the update
            </summary>
            <param name="criterias"></param>
            <returns></returns>
        </member>
        <member name="P:NightlyCode.Database.Entities.Operations.UpdateValuesOperation`1.Criterias">
            <summary>
            criterias to use
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Schema.SchemaColumnDescriptor">
            <summary>
            descriptor for a column of a <see cref="T:NightlyCode.Database.Entities.Schema.TableDescriptor"/>
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Schema.SchemaColumnDescriptor.#ctor">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Schema.SchemaColumnDescriptor"/>
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Schema.SchemaColumnDescriptor.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Schema.SchemaColumnDescriptor"/>
            </summary>
            <param name="name">name of column</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Schema.SchemaColumnDescriptor.Type">
            <summary>
            type of column
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Schema.SchemaCreator">
            <summary>
            creates a schema in database
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Schema.SchemaCreator.#ctor(NightlyCode.Database.Entities.Descriptors.EntityDescriptorCache)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Schema.SchemaCreator"/>
            </summary>
            <param name="modelcache"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Schema.SchemaCreator.CreateTable(NightlyCode.Database.Clients.IDBClient,NightlyCode.Database.Entities.Descriptors.EntityDescriptor,NightlyCode.Database.Clients.Transaction)">
            <summary>
            creates a new table from description
            </summary>
            <param name="client">database access</param>
            <param name="descriptor"><see cref="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptor"/> which describes schema of entity</param>
            <param name="transaction"></param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Schema.SchemaCreator.Create(System.Type,NightlyCode.Database.Clients.IDBClient)">
            <summary>
            creates a type in database
            </summary>
            <param name="type">type to create</param>
            <param name="client">client to database</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Schema.SchemaCreator.CreateIndices(NightlyCode.Database.Clients.IDBClient,System.String,System.Collections.Generic.IEnumerable{NightlyCode.Database.Entities.Descriptors.IndexDescriptor},NightlyCode.Database.Clients.Transaction)">
            <summary>
            creates indices for a table
            </summary>
            <param name="client">database access</param>
            <param name="table">table on which to create indices</param>
            <param name="indices">indices to create</param>
            <param name="transaction">transaction to use (optional)</param>
        </member>
        <member name="T:NightlyCode.Database.Entities.Schema.SchemaDescriptor">
            <summary>
            descriptor for a schema
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Schema.SchemaDescriptor.Name">
            <summary>
            name of schema
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Schema.SchemaDescriptor.Type">
            <summary>
            type of schema
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Schema.SchemaType">
            <summary>
            schema types
            </summary>
        </member>
        <member name="F:NightlyCode.Database.Entities.Schema.SchemaType.Table">
            <summary>
            data table
            </summary>
        </member>
        <member name="F:NightlyCode.Database.Entities.Schema.SchemaType.View">
            <summary>
            view
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Schema.SchemaUpdater">
            <summary>
            updates database schemata
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Schema.SchemaUpdater.#ctor(NightlyCode.Database.Entities.Descriptors.EntityDescriptorCache)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Schema.SchemaUpdater"/>
            </summary>
            <param name="modelcache">access to entity models</param>
        </member>
        <member name="M:NightlyCode.Database.Entities.Schema.SchemaUpdater.Update``1(NightlyCode.Database.Clients.IDBClient,System.String)">
            <summary>
            updates the schema of the specified type
            </summary>
            <typeparam name="T">schema type to update</typeparam>
            <param name="client">database connection</param>
            <param name="datasource">table from which to update schema (optional)</param>
        </member>
        <member name="T:NightlyCode.Database.Entities.Schema.TableDescriptor">
            <summary>
            descriptor for a database table
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Schema.TableDescriptor.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Schema.TableDescriptor"/>
            </summary>
            <param name="name">name of table</param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Schema.TableDescriptor.Columns">
            <summary>
            columns in table
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Schema.TableDescriptor.Indices">
            <summary>
            indices in table
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Schema.TableDescriptor.Uniques">
            <summary>
            unique declarations in table
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Schema.TableDescriptor.Type">
            <summary>
            type of schema
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Entities.Schema.ViewDescriptor">
            <summary>
            descriptor for a database view
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Entities.Schema.ViewDescriptor.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Entities.Schema.ViewDescriptor"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:NightlyCode.Database.Entities.Schema.ViewDescriptor.SQL">
            <summary>
            sql used to create view
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Entities.Schema.ViewDescriptor.Type">
            <summary>
            type of schema
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Expressions.PredicateExpression`1">
            <summary>
            a wrapped expression for database operations
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NightlyCode.Database.Expressions.PredicateExpression`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            ctor
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:NightlyCode.Database.Expressions.PredicateExpression`1.op_BitwiseAnd(NightlyCode.Database.Expressions.PredicateExpression{`0},NightlyCode.Database.Expressions.PredicateExpression{`0})">
            <summary>
            combines two expressions using the AND operator
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Expressions.PredicateExpression`1.op_BitwiseOr(NightlyCode.Database.Expressions.PredicateExpression{`0},NightlyCode.Database.Expressions.PredicateExpression{`0})">
            <summary>
            combines two expressions using the OR operator
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Expressions.PredicateExpression`1.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})~NightlyCode.Database.Expressions.PredicateExpression{`0}">
            <summary>
            implicit cast operator
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Expressions.WrappedExpression`1">
            <summary>
            wraps expressions and provides several logical operations for them
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NightlyCode.Database.Expressions.WrappedExpression`1.#ctor(System.Linq.Expressions.Expression{`0})">
            <summary>
            creates a new wrapped expression
            </summary>
            <param name="expression"></param>
        </member>
        <member name="P:NightlyCode.Database.Expressions.WrappedExpression`1.Content">
            <summary>
            the wrapped expression
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Expressions.WrappedExpression`1.Conjunct(NightlyCode.Database.Expressions.WrappedExpression{`0},NightlyCode.Database.Expressions.WrappedExpression{`0})">
            <summary>
            combines two expressions using the AND operator
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Expressions.WrappedExpression`1.Disjunct(NightlyCode.Database.Expressions.WrappedExpression{`0},NightlyCode.Database.Expressions.WrappedExpression{`0})">
            <summary>
            combines two expressions using the OR operator
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Expressions.WrappedExpression`1.op_BitwiseAnd(NightlyCode.Database.Expressions.WrappedExpression{`0},NightlyCode.Database.Expressions.WrappedExpression{`0})">
            <summary>
            combines two expressions using the AND operator
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Expressions.WrappedExpression`1.op_BitwiseOr(NightlyCode.Database.Expressions.WrappedExpression{`0},NightlyCode.Database.Expressions.WrappedExpression{`0})">
            <summary>
            combines two expressions using the OR operator
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Extern.ConversionKey">
            <summary>
            key used for specific conversion
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Extern.ConversionKey.#ctor(System.Type,System.Type)">
            <summary>
            ctor
            </summary>
            <param name="sourcetype"></param>
            <param name="targettype"></param>
        </member>
        <member name="P:NightlyCode.Database.Extern.ConversionKey.SourceType">
            <summary>
            source type from which to convert
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Extern.ConversionKey.TargetType">
            <summary>
            target type to which to convert
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Extern.Converter">
            <summary>
            converter used to convert data types
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Extern.Converter.#cctor">
            <summary>
            cctor
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Extern.Converter.RegisterConverter(NightlyCode.Database.Extern.ConversionKey,System.Func{System.Object,System.Object})">
            <summary>
            registers a specific converter to be used for a specific conversion
            </summary>
            <param name="key"></param>
            <param name="converter"></param>
        </member>
        <member name="M:NightlyCode.Database.Extern.Converter.Convert(System.Object,System.Type,System.Boolean)">
            <summary>
            converts the value to a specific target type
            </summary>
            <param name="value"></param>
            <param name="targettype"></param>
            <param name="allownullonvaluetypes"> </param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Extern.Converter.Convert``1(System.Object,System.Boolean)">
            <summary>
            converts the value to the specified target type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="allownullonvaluetypes"> </param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Database.Extern.Logger">
            <summary>
            provides logging functions to the current assembly
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Extern.Logger.Info(System.Object,System.String,System.String)">
            <summary>
            logs an info
            </summary>
            <param name="sender">sender of the message</param>
            <param name="message">message content</param>
            <param name="details">message details</param>
        </member>
        <member name="M:NightlyCode.Database.Extern.Logger.Warning(System.Object,System.String,System.String)">
            <summary>
            logs a warning
            </summary>
            <param name="sender">sender of the message</param>
            <param name="message">message content</param>
            <param name="details">message details</param>
        </member>
        <member name="M:NightlyCode.Database.Extern.Logger.Error(System.Object,System.String,System.Exception)">
            <summary>
            logs an error
            </summary>
            <param name="sender">sender of the message</param>
            <param name="message">message content</param>
            <param name="details">message details</param>
        </member>
        <member name="T:NightlyCode.Database.Extern.ILoggerProvider">
            <summary>
            interface for a provider of logging functions
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Extern.ILoggerProvider.Info">
            <summary>
            method to use to log an info
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Extern.ILoggerProvider.Warning">
            <summary>
            method to use to log a warning
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Extern.ILoggerProvider.Error">
            <summary>
            method to use to log an error
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Info.DBInfo">
            <summary>
            base implementation for db specific logic
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.#ctor">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Info.DBInfo"/>
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.AddFieldLogic``1(System.Action{``0,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor}})">
            <summary>
            adds a logic to use when generating code for a database field
            </summary>
            <typeparam name="T">type of field</typeparam>
            <param name="logic">logic to use when generating code</param>
        </member>
        <member name="P:NightlyCode.Database.Info.DBInfo.Parameter">
            <summary>
            character used for parameters
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.DBInfo.JoinHint">
            <summary>
            parameter used when joining
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.DBInfo.AutoIncrement">
            <summary>
            parameter used to create autoincrement columns
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.DBInfo.ColumnIndicator">
            <summary>
            character used to specify columns explicitely
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.DBInfo.LikeTerm">
            <summary>
            term used for like expression
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.Replace(System.Linq.Expressions.ExpressionVisitor,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            method used to create a replace function
            </summary>
            <param name="preparator"> </param>
            <param name="value"></param>
            <param name="src"></param>
            <param name="target"></param>
            <param name="visitor"> </param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.ToUpper(System.Linq.Expressions.ExpressionVisitor,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Linq.Expressions.Expression)">
            <summary>
            converts an expression to uppercase using database command
            </summary>
            <param name="visitor"></param>
            <param name="preparator"></param>
            <param name="value"></param>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.ToLower(System.Linq.Expressions.ExpressionVisitor,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Linq.Expressions.Expression)">
            <summary>
            converts an expression to lowercase using database command
            </summary>
            <param name="visitor"></param>
            <param name="preparator"></param>
            <param name="value"></param>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.CheckIfTableExists(NightlyCode.Database.Clients.IDBClient,System.String)">
            <summary>
            command used to check whether a table exists
            </summary>
            <param name="db"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.GetDBType(System.Type)">
            <summary>
            get db type of an application type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.GetDBRepresentation(System.Type)">
            <summary>
            get db representation type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.MaskColumn(System.String)">
            <summary>
            masks a column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:NightlyCode.Database.Info.DBInfo.CreateSuffix">
            <summary>
            suffix to use when creating tables
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.CreateColumn(NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor)">
            <summary>
            text used to create a column
            </summary>
            <param name="operation"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.GetSchema(NightlyCode.Database.Clients.IDBClient,System.String)">
            <summary>
            get schema for a table in database
            </summary>
            <param name="client">database connection</param>
            <param name="name">name of table of which to get schema</param>
            <returns><see cref="T:NightlyCode.Database.Entities.Schema.SchemaDescriptor"/> containing all information about table</returns>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.AddColumn(NightlyCode.Database.Clients.IDBClient,System.String,NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor,NightlyCode.Database.Clients.Transaction)">
            <summary>
            adds a column to a table
            </summary>
            <param name="client">db access</param>
            <param name="table">table to modify</param>
            <param name="column">column to add</param>
            <param name="transaction">transaction to use (optional)</param>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.RemoveColumn(NightlyCode.Database.Clients.IDBClient,System.String,System.String)">
            <summary>
            removes a column from a table
            </summary>
            <param name="client">db access</param>
            <param name="table">table to modify</param>
            <param name="column">column to remove</param>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.AlterColumn(NightlyCode.Database.Clients.IDBClient,System.String,NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor)">
            <summary>
            modifies a column of a table
            </summary>
            <param name="client">db access</param>
            <param name="table">table to modify</param>
            <param name="column">column to modify</param>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.Append(NightlyCode.Database.Entities.Operations.Fields.IDBField,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            appends a database field to an <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator"/>
            </summary>
            <param name="field">field to append</param>
            <param name="preparator">operation to append function to</param>
            <param name="descriptorgetter">function used to get <see cref="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptor"/>s for types</param>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.BeginTransaction(System.Data.IDbConnection,System.Object)">
            <summary>
            begins a new transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.DBInfo.EndTransaction(System.Object)">
            <summary>
            ends a transaction
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Info.IDBInfo">
            <summary>
            db specific information
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.IDBInfo.Parameter">
            <summary>
            character used for parameters
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.IDBInfo.JoinHint">
            <summary>
            parameter used when joining
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.IDBInfo.AutoIncrement">
            <summary>
            parameter used to create autoincrement columns
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.IDBInfo.ColumnIndicator">
            <summary>
            character used to specify columns explicitely
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.IDBInfo.LikeTerm">
            <summary>
            term used for like expression
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.Replace(System.Linq.Expressions.ExpressionVisitor,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            method used to create a replace function
            </summary>
            <param name="preparator"> </param>
            <param name="value"></param>
            <param name="src"></param>
            <param name="target"></param>
            <param name="visitor"> </param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.ToUpper(System.Linq.Expressions.ExpressionVisitor,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Linq.Expressions.Expression)">
            <summary>
            converts an expression to uppercase using database command
            </summary>
            <param name="visitor"></param>
            <param name="preparator"></param>
            <param name="value"></param>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.ToLower(System.Linq.Expressions.ExpressionVisitor,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Linq.Expressions.Expression)">
            <summary>
            converts an expression to lowercase using database command
            </summary>
            <param name="visitor"></param>
            <param name="preparator"></param>
            <param name="value"></param>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.CheckIfTableExists(NightlyCode.Database.Clients.IDBClient,System.String)">
            <summary>
            command used to check whether a table exists
            </summary>
            <param name="db"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.GetDBType(System.Type)">
            <summary>
            get db type of an application type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.GetDBRepresentation(System.Type)">
            <summary>
            get db representation type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.MaskColumn(System.String)">
            <summary>
            masks a column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:NightlyCode.Database.Info.IDBInfo.CreateSuffix">
            <summary>
            suffix to use when creating tables
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.CreateColumn(NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor)">
            <summary>
            text used to create a column
            </summary>
            <param name="operation"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.GetSchema(NightlyCode.Database.Clients.IDBClient,System.String)">
            <summary>
            get schema for a table in database
            </summary>
            <param name="client">database connection</param>
            <param name="name">name of table of which to get schema</param>
            <returns><see cref="T:NightlyCode.Database.Entities.Schema.SchemaDescriptor"/> containing all information about table</returns>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.AddColumn(NightlyCode.Database.Clients.IDBClient,System.String,NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor,NightlyCode.Database.Clients.Transaction)">
            <summary>
            adds a column to a table
            </summary>
            <param name="client">db access</param>
            <param name="table">table to modify</param>
            <param name="column">column to add</param>
            <param name="transaction">transaction to use (optional)</param>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.RemoveColumn(NightlyCode.Database.Clients.IDBClient,System.String,System.String)">
            <summary>
            removes a column from a table
            </summary>
            <param name="client">db access</param>
            <param name="table">table to modify</param>
            <param name="column">column to remove</param>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.AlterColumn(NightlyCode.Database.Clients.IDBClient,System.String,NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor)">
            <summary>
            modifies a column of a table
            </summary>
            <param name="client">db access</param>
            <param name="table">table to modify</param>
            <param name="column">column to modify</param>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.Append(NightlyCode.Database.Entities.Operations.Fields.IDBField,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            appends a database field to an <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator"/>
            </summary>
            <param name="field">field to append</param>
            <param name="preparator">operation to append function to</param>
            <param name="descriptorgetter">function used to get <see cref="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptor"/>s for types</param>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.BeginTransaction(System.Data.IDbConnection,System.Object)">
            <summary>
            begins a new transaction
            </summary>
            <returns>transaction object to assign to command</returns>
        </member>
        <member name="M:NightlyCode.Database.Info.IDBInfo.EndTransaction(System.Object)">
            <summary>
            ends a transaction
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Info.MySQLInfo">
            <summary>
            information for mysql db
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.MySQLInfo.BeginTransaction(System.Data.IDbConnection,System.Object)">
            <summary>
            begins a new transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.MySQLInfo.EndTransaction(System.Object)">
            <summary>
            ends a transaction
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Info.PostgreInfo">
            <summary>
            database specific logic for postgre databases
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.PostgreInfo.#ctor">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Info.PostgreInfo"/>
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.PostgreInfo.AppendFunction(NightlyCode.Database.Entities.Operations.Fields.DBFunction,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Func{System.Type,NightlyCode.Database.Entities.Descriptors.EntityDescriptor})">
            <summary>
            appends a database function to an <see cref="T:NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator"/>
            </summary>
            <param name="function">function to be executed</param>
            <param name="preparator">operation to append function to</param>
            <param name="descriptorgetter">function used to get <see cref="T:NightlyCode.Database.Entities.Descriptors.EntityDescriptor"/>s for types</param>
        </member>
        <member name="P:NightlyCode.Database.Info.PostgreInfo.Parameter">
            <summary>
            character used for parameters
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.PostgreInfo.JoinHint">
            <summary>
            parameter used when joining
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.PostgreInfo.AutoIncrement">
            <summary>
            parameter used to create autoincrement columns
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.PostgreInfo.ColumnIndicator">
            <summary>
            character used to specify columns explicitely
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.PostgreInfo.LikeTerm">
            <summary>
            term used for like expression
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.PostgreInfo.Replace(System.Linq.Expressions.ExpressionVisitor,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            method used to create a replace function
            </summary>
            <param name="preparator"> </param>
            <param name="value"></param>
            <param name="src"></param>
            <param name="target"></param>
            <param name="visitor"> </param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.PostgreInfo.CheckIfTableExists(NightlyCode.Database.Clients.IDBClient,System.String)">
            <summary>
            command used to check whether a table exists
            </summary>
            <param name="db"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.PostgreInfo.GetDBType(System.Type)">
            <summary>
            get db type of an application type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.PostgreInfo.GetDBRepresentation(System.Type)">
            <summary>
            get db representation type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.PostgreInfo.MaskColumn(System.String)">
            <summary>
            masks a column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:NightlyCode.Database.Info.PostgreInfo.CreateSuffix">
            <summary>
            suffix to use when creating tables
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.PostgreInfo.CreateColumn(NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor)">
            <summary>
            text used to create a column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.PostgreInfo.BeginTransaction(System.Data.IDbConnection,System.Object)">
            <summary>
            begins a new transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.PostgreInfo.EndTransaction(System.Object)">
            <summary>
            ends a transaction
            </summary>
        </member>
        <member name="T:NightlyCode.Database.Info.SQLiteInfo">
            <summary>
            information for sqlite
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.#ctor">
            <summary>
            creates a new <see cref="T:NightlyCode.Database.Info.SQLiteInfo"/>
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.SQLiteInfo.Parameter">
            <summary>
            character used for parameters
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.SQLiteInfo.JoinHint">
            <summary>
            parameter used when joining
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.SQLiteInfo.AutoIncrement">
            <summary>
            parameter used to create autoincrement columns
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.SQLiteInfo.ColumnIndicator">
            <summary>
            character used to specify columns explicitely
            </summary>
        </member>
        <member name="P:NightlyCode.Database.Info.SQLiteInfo.LikeTerm">
            <summary>
            term used for like expression
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.Replace(System.Linq.Expressions.ExpressionVisitor,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            method used to create a replace function
            </summary>
            <param name="preparator"> </param>
            <param name="value"></param>
            <param name="src"></param>
            <param name="target"></param>
            <param name="visitor"> </param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.ToUpper(System.Linq.Expressions.ExpressionVisitor,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Linq.Expressions.Expression)">
            <summary>
            converts an expression to uppercase using database command
            </summary>
            <param name="visitor"></param>
            <param name="preparator"></param>
            <param name="value"></param>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.ToLower(System.Linq.Expressions.ExpressionVisitor,NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,System.Linq.Expressions.Expression)">
            <summary>
            converts an expression to lowercase using database command
            </summary>
            <param name="visitor"></param>
            <param name="preparator"></param>
            <param name="value"></param>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.CheckIfTableExists(NightlyCode.Database.Clients.IDBClient,System.String)">
            <summary>
            command used to check whether a table exists
            </summary>
            <param name="db"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.GetDBType(System.Type)">
            <summary>
            get db type of an application type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.GetDBRepresentation(System.Type)">
            <summary>
            get db representation type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.MaskColumn(System.String)">
            <summary>
            masks a column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:NightlyCode.Database.Info.SQLiteInfo.CreateSuffix">
            <summary>
            suffix to use when creating tables
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.CreateColumn(NightlyCode.Database.Entities.Operations.Prepared.OperationPreparator,NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor)">
            <summary>
            text used to create a column
            </summary>
            <param name="operation"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.GetSchema(NightlyCode.Database.Clients.IDBClient,System.String)">
            <summary>
            get schema for a table in database
            </summary>
            <param name="client">database connection</param>
            <param name="tablename">name of table of which to get schema</param>
            <returns><see cref="T:NightlyCode.Database.Entities.Schema.SchemaDescriptor"/> containing all information about table</returns>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.AddColumn(NightlyCode.Database.Clients.IDBClient,System.String,NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor,NightlyCode.Database.Clients.Transaction)">
            <summary>
            adds a column to a table
            </summary>
            <param name="client">db access</param>
            <param name="table">table to modify</param>
            <param name="column">column to add</param>
            <param name="transaction">transaction to use (optional)</param>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.RemoveColumn(NightlyCode.Database.Clients.IDBClient,System.String,System.String)">
            <summary>
            removes a column from a table
            </summary>
            <param name="client">db access</param>
            <param name="table">table to modify</param>
            <param name="column">column to remove</param>
            <remarks>
            creates a new table and transfers the data since SQLite has no drop column command
            </remarks>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.AlterColumn(NightlyCode.Database.Clients.IDBClient,System.String,NightlyCode.Database.Entities.Descriptors.EntityColumnDescriptor)">
            <summary>
            modifies a column of a table
            </summary>
            <param name="client">db access</param>
            <param name="table">table to modify</param>
            <param name="column">column to modify</param>
            <remarks>
            Removes the column and recreates it. So you will lose all your data in that column.
            </remarks>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.BeginTransaction(System.Data.IDbConnection,System.Object)">
            <summary>
            begins a new transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.EndTransaction(System.Object)">
            <summary>
            ends a transaction
            </summary>
        </member>
        <member name="M:NightlyCode.Database.Info.SQLiteInfo.AnalyseTableSql(NightlyCode.Database.Entities.Schema.TableDescriptor,System.String)">
            <summary>
            analyses the sql of a table creation and fills the table descriptor from the results
            </summary>
            <param name="descriptor">descriptor to fill</param>
            <param name="sql">sql to analyse</param>
        </member>
    </members>
</doc>
